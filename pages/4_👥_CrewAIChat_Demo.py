import os
import streamlit as st
from dotenv import load_dotenv
from crewai import Crew, Agent, Task, LLM
from crewai.process import Process
from langchain_core.callbacks import BaseCallbackHandler
from langchain_core.agents import AgentAction, AgentFinish
from langchain_openai import ChatOpenAI
from typing import Any, Dict
from utility import check_password

st.set_page_config(page_title="Crew AI Chat Demo", page_icon="ðŸ‘¥")

# Do not continue if check_password is not True.  
if not check_password():  
    st.stop()

# endregion <--------- Streamlit Page Configuration --------->

st.markdown("# Crew AI Chat Demo")
st.sidebar.header("Crew AI Chat Demo")

# Load OpenAI API key
load_dotenv()  
openai_api_key = os.getenv("KEY")
os.environ["OPENAI_API_KEY"] = openai_api_key

# Initialize OpenAI client with the API key from session state
client = LLM(
    model="gpt-4o",  # Use the standard OpenAI model name
    api_key=openai_api_key,
    base_url="https://litellm.govtext.gov.sg/",
    default_headers={
        "user-agent": "Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101 Firefox/81.0"
    },
    custom_llm_provider="azure openai",
    deployment_id="gpt-4o-prd-gcc2-lb"  # Your Azure deployment name
)


if "openai_model" not in st.session_state:
    st.session_state["openai_model"] = "gpt-3.5-turbo"

class CustomHandler(BaseCallbackHandler):
    """A custom handler for logging interactions within the process chain."""
    
    def __init__(self, agent_name: str) -> None:
        super().__init__()
        self.agent_name = agent_name

    def on_chain_start(self, serialized: Dict[str, Any], outputs: Dict[str, Any], **kwargs: Any) -> None:
        """Log the start of a chain with user input."""
        st.session_state.messages.append({"role": "assistant", "content": outputs['input']})
        st.chat_message("assistant").write(outputs['input'])
        
#    def on_agent_action(self, serialized: Dict[str, Any], inputs: Dict[str, Any], **kwargs: Any) -> None:
    def on_agent_action(self, action: AgentAction, **kwargs: Any) -> Any:
        """""Log the action taken by an agent during a chain run."""
        st.session_state.messages.append({"role": "assistant", "content": AgentAction.inputs['input']})
        st.chat_message("assistant").write(AgentAction.inputs['input'])
        
    def on_chain_end(self, outputs: Dict[str, Any], **kwargs: Any) -> None:
        """Log the end of a chain with the output generated by an agent."""
        st.session_state.messages.append({"role": self.agent_name, "content": outputs['output']})
        st.chat_message(self.agent_name).write(outputs['output'])

# Define agents with their specific roles and goals
project_manager = Agent(
    role='Project Manager',
    backstory='''You are the project manager. 
                 You consider the task and break it down into smaller tasks to be performed by the team.
                 You do not write code.''',
    goal='Generate actionable steps for task completion.',
    llm=client,
    verbose=True,
    callbacks=[CustomHandler("Project Manager")]
)

coder = Agent(
    role='Python Coder',
    backstory='''You are a Senior Python Developer responsible for writing clean, efficient and robust Python code
                 that is easy to read and understand.
                 You write code using object oriented programming principles and follow best practices.
                 You produce functional, feature complete code.''',
    goal='Develop high-quality, well-structured Python code.',
    llm=client,
    verbose=True,
    callbacks=[CustomHandler("Coder")]
)

st.title("Crew AI Chat Application")
st.write("This is a Crew AI chat application using the OpenAI API.")

# Initialize the message log in session state if not already present
if "messages" not in st.session_state:
    st.session_state["messages"] = [{"role": "assistant", "content": "What code do you want us to write?"}]

# Display existing messages
for msg in st.session_state.messages:
    st.chat_message(msg["role"]).write(msg["content"])

# Handle user input
if prompt := st.chat_input():
    st.session_state.messages.append({"role": "user", "content": prompt})
    st.chat_message("user").write(prompt)

    # Define tasks for each agent
    task_plan = Task(
        description=f"""Consider how you would go about the task, '{prompt}'.
                    Create a plan to complete the task.
                    The final step should always require delivering feature complete code""",
        agent=project_manager,
        expected_output="A detailed plan for the team to complete the task.",
    )
    
    task_code = Task(
        description="Write feature complete code that is simple, efficient and adheres to object oriented principles.",
        agent=coder,
        expected_output="Well-written and structured code that is feature complete, simple, efficient and adheres to object oriented principles.",
    )
    
    # Set up the crew and process tasks hierarchically
    project_crew = Crew(
        tasks=[task_plan, task_code],
        agents=[project_manager, coder],
        process=Process.hierarchical,
        manager_llm=client,
        full_output=True,
        verbose=True,
        manager_callbacks=[CustomHandler("Crew Manager")]
    )
    final = project_crew.kickoff()

    # Display the final result
    result = f"## Here is the Final Result \n\n {final}"
    st.session_state.messages.append({"role": "assistant", "content": result})
    st.chat_message("assistant").write(result)